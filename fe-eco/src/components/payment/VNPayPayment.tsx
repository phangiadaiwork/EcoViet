import React, { useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  FormControl,
  FormLabel,
  RadioGroup,
  FormControlLabel,
  Radio,
  Alert,
  CircularProgress
} from '@mui/material';
import { Payment, AccountBalance } from '@mui/icons-material';

interface VNPayPaymentProps {
  amount: number;
  orderId: string;
  onPaymentSuccess: (result: any) => void;
  onPaymentError: (error: any) => void;
}

const VNPayPayment: React.FC<VNPayPaymentProps> = ({
  amount,
  orderId,
  onPaymentError,
}) => {
  const [selectedBank, setSelectedBank] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Danh s√°ch ng√¢n h√†ng VNPay h·ªó tr·ª£
  const supportedBanks = [
    { code: 'VNPAYQR', name: 'Thanh to√°n qua ·ª©ng d·ª•ng h·ªó tr·ª£ VNPAYQR', icon: 'üì±' },
    { code: 'VIETCOMBANK', name: 'Ng√¢n h√†ng Vietcombank', icon: 'üè¶' },
    { code: 'BIDV', name: 'Ng√¢n h√†ng BIDV', icon: 'üè¶' },
    { code: 'AGRIBANK', name: 'Ng√¢n h√†ng Agribank', icon: 'üè¶' },
    { code: 'TCB', name: 'Ng√¢n h√†ng Techcombank', icon: 'üè¶' },
    { code: 'ACB', name: 'Ng√¢n h√†ng ACB', icon: 'üè¶' },
    { code: 'MB', name: 'Ng√¢n h√†ng MB', icon: 'üè¶' },
    { code: 'SACOMBANK', name: 'Ng√¢n h√†ng Sacombank', icon: 'üè¶' },
    { code: 'VISA', name: 'Th·∫ª qu·ªëc t·∫ø Visa', icon: 'üí≥' },
    { code: 'MASTERCARD', name: 'Th·∫ª qu·ªëc t·∫ø MasterCard', icon: 'üí≥' },
  ];

  const handleVNPayPayment = async () => {
    if (!selectedBank) {
      setError('Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n');
      return;
    }

    setLoading(true);
    setError('');

    try {
      // G·ªçi API t·∫°o URL thanh to√°n VNPay
      const response = await fetch('/api/v1/payments/vnpay/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': typeof window !== 'undefined' && localStorage.getItem('token') ? `Bearer ${localStorage.getItem('token')}` : ''
        },
        body: JSON.stringify({
          order_id: orderId,
          amount: amount, // VNPay s·ª≠ d·ª•ng VND
          bank_code: selectedBank,
          description: `Thanh to√°n ƒë∆°n h√†ng ${orderId}`,
          locale: 'vn',
          
        })
      });

      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ t·∫°o li√™n k·∫øt thanh to√°n');
      }

      const result = await response.json();
      
      if (result.payment_url) {
        // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n VNPay
        window.location.href = result.payment_url;
      } else {
        throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c URL thanh to√°n');
      }

    } catch (err: any) {
      setError(err.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o thanh to√°n');
      onPaymentError(err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card>
      <CardContent>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 3 }}>
          <Payment sx={{ mr: 1, color: 'primary.main' }} />
          <Typography variant="h6">
            Thanh to√°n VNPay
          </Typography>
        </Box>

        <Typography variant="body2" color="text.secondary" paragraph>
          S·ªë ti·ªÅn: <strong>{amount.toLocaleString('vi-VN')} VND</strong>
        </Typography>

        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        <FormControl component="fieldset" fullWidth sx={{ mb: 3 }}>
          <FormLabel component="legend">
            Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n:
          </FormLabel>
          <RadioGroup
            value={selectedBank}
            onChange={(e) => setSelectedBank(e.target.value)}
          >
            {supportedBanks.map((bank) => (
              <FormControlLabel
                key={bank.code}
                value={bank.code}
                control={<Radio />}
                label={
                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
                    <span style={{ marginRight: 8 }}>{bank.icon}</span>
                    {bank.name}
                  </Box>
                }
                sx={{ mb: 1 }}
              />
            ))}
          </RadioGroup>
        </FormControl>

        <Box sx={{ textAlign: 'center' }}>
          <Button
            variant="contained"
            size="large"
            onClick={handleVNPayPayment}
            disabled={loading || !selectedBank}
            startIcon={loading ? <CircularProgress size={20} /> : <AccountBalance />}
            sx={{ minWidth: 200 }}
          >
            {loading ? 'ƒêang x·ª≠ l√Ω...' : 'Thanh to√°n ngay'}
          </Button>
        </Box>

        <Box sx={{ mt: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>
          <Typography variant="body2" color="text.secondary">
            <strong>üîí An to√†n & B·∫£o m·∫≠t:</strong>
          </Typography>
          <Typography variant="body2" color="text.secondary">
            ‚Ä¢ Thanh to√°n ƒë∆∞·ª£c b·∫£o m·∫≠t b·ªüi VNPay
          </Typography>
          <Typography variant="body2" color="text.secondary">
            ‚Ä¢ H·ªó tr·ª£ t·∫•t c·∫£ ng√¢n h√†ng t·∫°i Vi·ªát Nam
          </Typography>
          <Typography variant="body2" color="text.secondary">
            ‚Ä¢ Giao d·ªãch ƒë∆∞·ª£c m√£ h√≥a SSL 256-bit
          </Typography>
        </Box>
      </CardContent>
    </Card>
  );
};

export default VNPayPayment;
